/**
 * Implement Gatsby's Node APIs in this file.
 *
 * See: https://www.gatsbyjs.com/docs/node-apis/
 */

// You can delete this file if you're not using it

// Custom schema
exports.createSchemaCustomization = ({ actions }) => {
  const { createTypes } = actions;
  const typeDefs = `
  type json implements Node @dontInfer {
      knowledgeResources: [KnowledgeResources ]
      competencies: [Competencies ]
      activities: [Activities ]
      roles: [Roles ]
      positions: [Positions ]
      counts: [Counts ]
  }

  type KrAdditionalProperties { files: [String ] URL: [String ] }

  type PositionAddtionalProperties { Department: String sector: String }

  type CompetenciesAdditionalProps { competencyType: String
    competencyArea: String
    competencySector: String
    competencyType: String
    cod: String }

  type ChildNodes {
      id: String
      name: String
      description: String
      source: String
      level: String
      type: String }

  type posChildNodes { type: String
      id: String
      name: String
      description: String
      source: String
      status: String }

  type KnowledgeResources { type: String
    id: String
    name: String
    description: String
    additionalProperties: KrAdditionalProperties }

  type Competencies @infer { type: String
    id: String
    name: String
    description: String
    status: String
    source: String
    additionalProperties: CompetenciesAdditionalProps
    children: [ChildNodes ] }

  type Activities { type: String
    id: String
    name: String
    description: String }

  type Roles  { type: String
    id: String
    name: String
    description: String
    children: [posChildNodes] }

  type Positions  { type: String
    id: String
    name: String
    description: String
    additionalProperties: PositionAddtionalProperties
    children: [posChildNodes] }

  type Query {
     getPositions(name: String, id: String, department: String, sector: String): JSON
     getRoles(name: String, id: String): JSON
     getActivities(name: String, id: String): JSON
     getCompetencies(name: String, id: String, status: String, competencyType: String, cod: String, competencyArea: String): JSON
     getAllCompetencies(name: String, id: String, status: String, competencyType: [String], cod: [String], competencyArea: [String], competencySector: [String]): [Competencies]
     getAllPositions(name: String, id: String, department: [String], sector: [String]): [Positions]
     getAllPosDepartments: JSON
     getAllCods: JSON
     getAllAreas: JSON
     getAllSectors: JSON
  }

  type Counts { key: String value: Int }

  type Source { knowledgeResources: [KnowledgeResources ]
    competencies: [Competencies ]
    activities: [Activities ]
    roles: [Roles ]
    positions: [Positions ]
    counts: [Counts ] }

  type Hits { _index: String
    _type: String
    _id: String
    _score: Int
    _source: Source }

  type Shards { total: Int successful: Int skipped: Int failed: Int }

  type AutogeneratedMainType { took: Int
    timed_out: Boolean
    hits: Hits
    _shards: Shards }

  `;
  createTypes(typeDefs);
};

// Custom resolvers
exports.createResolvers = ({ createResolvers }) => {
  //For positions
  const posResolvers = {
    Query: {
      getPositions: {
        resolve(source, args, context, info) {
          var res = context.nodeModel.getAllNodes({ type: "json" });
          var filterOutput = res[0].positions;
          if (args.name || args.id || args.department) {
            switch (args.name || args.id || args.department) {
              case args.name:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) =>
                    data.name.toLowerCase().includes(args.name.toLowerCase())
                  );
                return filterOutput;
                break;
              case args.id:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) =>
                    data.id.toLowerCase().includes(args.id.toLowerCase())
                  );
                return filterOutput;
                break;
              case args.department:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => {
                    if (data.additionalProperties !== undefined) {
                      return data.additionalProperties.Department.toLowerCase().includes(
                        args.department.toLowerCase()
                      );
                    }
                  });
                return filterOutput;
                break;
              default:
                return filterOutput;
            }
          } else {
            return filterOutput;
          }
        },
      },
    },
  };

  //For roles
  const rolesResolvers = {
    Query: {
      getRoles: {
        resolve(source, args, context, info) {
          var res = context.nodeModel.getAllNodes({ type: "json" });
          var filterOutput = res[0].roles;
          if (args.name || args.id) {
            switch (args.name || args.id) {
              case args.name:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => data.name === args.name);
                return filterOutput;
                break;
              case args.id:
                filterOutput = filterOutput.filter(
                  (data) => data.id === args.id
                );
                return filterOutput;
                break;

              default:
                return filterOutput;
            }
          } else {
            return filterOutput;
          }
        },
      },
    },
  };

  //For activities
  const activitiesResolvers = {
    Query: {
      getActivities: {
        resolve(source, args, context, info) {
          var res = context.nodeModel.getAllNodes({ type: "json" });
          var filterOutput = res[0].activities;
          if (args.name || args.id) {
            switch (args.name || args.id) {
              case args.name:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => data.name === args.name);
                return filterOutput;
                break;
              case args.id:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => data.id === args.id);
                return filterOutput;
                break;

              default:
                return filterOutput;
            }
          } else {
            return filterOutput;
          }
        },
      },
    },
  };

  //For competencies
  const competenciesResolvers = {
    Query: {
      getCompetencies: {
        resolve(source, args, context, info) {
          var res = context.nodeModel.getAllNodes({ type: "json" });
          var filterOutput = res[0].competencies;
          if (
            args.name ||
            args.id ||
            args.status ||
            args.competencyType ||
            args.competencyArea ||
            args.cod
          ) {
            switch (
              args.name ||
              args.id ||
              args.status ||
              args.competencyType ||
              args.competencyArea ||
              args.cod
            ) {
              case args.name:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => data.name === args.name);
                return filterOutput;
                break;
              case args.id:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => data.id === args.id);
                return filterOutput;
                break;
              case args.status:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter(
                    (data) => data.status === args.status.toUpperCase()
                  );
                return filterOutput;
                break;
              case args.competencyType:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => {
                    if (data.additionalProperties !== undefined) {
                      return (
                        data.additionalProperties.competencyType ===
                        args.competencyType
                      );
                    }
                  });
                return filterOutput;
                break;

              case args.competencyArea:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => {
                    if (data.additionalProperties !== undefined) {
                      return (
                        data.additionalProperties.competencyArea ===
                        args.competencyArea
                      );
                    }
                  });
                return filterOutput;
                break;

              case args.cod:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => {
                    if (data.additionalProperties !== undefined) {
                      return data.additionalProperties.cod === args.cod;
                    }
                  });
                return filterOutput;
                break;

              default:
                return filterOutput;
            }
          } else {
            return filterOutput;
          }
        },
      },
    },
  };

  // For departments of positions
  const allPosDepartments = {
    Query: {
      getAllPosDepartments: {
        resolve(source, args, context, info) {
          var res = context.nodeModel.getAllNodes({ type: "json" });
          var filterOutput = res[0].positions;
          var filteredList = [];
          filterOutput =
            filterOutput &&
            filterOutput.filter((data) => {
              if (data.additionalProperties !== undefined) {
                if (data.additionalProperties.Department) {
                  filteredList.push(data.additionalProperties.Department);
                }
              }
            });
          return filteredList;
        },
      },
    },
  };

  const allCods = {
    Query: {
      getAllCods: {
        resolve(source, args, context, info) {
          var res = context.nodeModel.getAllNodes({ type: "json" });
          var filterOutput = res[0].competencies;
          var filteredList = [];
          filterOutput =
            filterOutput &&
            filterOutput.filter((data) => {
              if (data.additionalProperties !== undefined) {
                if (data.additionalProperties.cod) {
                  filteredList.push(data.additionalProperties.cod);
                }
              }
            });
          return filteredList;
        },
      },
    },
  };

  const allAreas = {
    Query: {
      getAllAreas: {
        resolve(source, args, context, info) {
          var res = context.nodeModel.getAllNodes({ type: "json" });
          var filterOutput = res[0].competencies;
          var filteredList = [];
          filterOutput =
            filterOutput &&
            filterOutput.filter((data) => {
              if (data.additionalProperties !== undefined) {
                if (data.additionalProperties.competencyArea) {
                  filteredList.push(data.additionalProperties.competencyArea);
                }
              }
            });
          return filteredList;
        },
      },
    },
  };

  const allSectors = {
    Query: {
      getAllSectors: {
        resolve(source, args, context, info) {
          var res = context.nodeModel.getAllNodes({ type: "json" });
          var filterOutput = res[0].competencies;
          var filteredList = [];
          filterOutput =
            filterOutput &&
            filterOutput.filter((data) => {
              if (data.additionalProperties !== undefined) {
                if (data.additionalProperties.competencySector) {
                  filteredList.push(data.additionalProperties.competencySector);
                }
              }
            });
          return filteredList;
        },
      },
    },
  };

  const customCompFilters = {
    Query: {
      getAllCompetencies: {
        resolve(source, args, context, info) {
          var res = context.nodeModel.getAllNodes({ type: "json" });
          var filterOutput = res[0].competencies;
          console.log("customCompFilters....");
          if (args.id) {
            filterOutput =
              filterOutput &&
              filterOutput.filter((data) => {
                if (data.id !== undefined) {
                  if (data.id === args.id) {
                    return data;
                  }
                }
              });
            return filterOutput;
          } else if (
            args.cod &&
            args.competencyType &&
            args.competencySector &&
            !args.competencyArea
          ) {
            filterOutput =
              filterOutput &&
              filterOutput.filter((data) => {
                if (data.additionalProperties !== undefined) {
                  if (
                    data.additionalProperties.competencyType ===
                      args.competencyType &&
                    data.additionalProperties.cod === args.cod &&
                    data.additionalProperties.competencySector ===
                      args.competencySector
                  ) {
                    return data;
                  }
                }
              });
            return filterOutput;
          } else if (
            args.cod &&
            args.competencyArea &&
            args.competencySector &&
            !args.competencyType
          ) {
            filterOutput =
              filterOutput &&
              filterOutput.filter((data) => {
                if (data.additionalProperties !== undefined) {
                  if (
                    data.additionalProperties.competencyArea ===
                      args.competencyArea &&
                    data.additionalProperties.cod === args.cod &&
                    data.additionalProperties.competencySector ===
                      args.competencySector
                  ) {
                    return data;
                  }
                }
              });
            return filterOutput;
          } else if (
            args.competencyType &&
            args.competencyArea &&
            args.competencySector &&
            !args.cod
          ) {
            filterOutput =
              filterOutput &&
              filterOutput.filter((data) => {
                if (data.additionalProperties !== undefined) {
                  if (
                    data.additionalProperties.competencyType ===
                      args.competencyType &&
                    data.additionalProperties.competencyArea ===
                      args.competencyArea &&
                    data.additionalProperties.competencySector ===
                      args.competencySector
                  ) {
                    return data;
                  }
                }
              });
            return filterOutput;
          } else if (
            args.competencyType &&
            args.competencyArea &&
            args.cod &&
            !args.competencySector
          ) {
            filterOutput =
              filterOutput &&
              filterOutput.filter((data) => {
                if (data.additionalProperties !== undefined) {
                  if (
                    data.additionalProperties.competencyType ===
                      args.competencyType &&
                    data.additionalProperties.competencyArea ===
                      args.competencyArea &&
                    data.additionalProperties.cod === args.cod
                  ) {
                    return data;
                  }
                }
              });
            return filterOutput;
          } else if (
            args.cod &&
            args.competencyType &&
            args.competencyArea &&
            args.competencySector
          ) {
            filterOutput =
              filterOutput &&
              filterOutput.filter((data) => {
                if (data.additionalProperties !== undefined) {
                  if (
                    data.additionalProperties.competencyType &&
                    data.additionalProperties.competencyType ===
                      args.competencyType &&
                    data.additionalProperties.competencyArea &&
                    data.additionalProperties.competencyArea ===
                      args.competencyArea &&
                    data.additionalProperties.cod &&
                    data.additionalProperties.cod === args.cod &&
                    data.additionalProperties.competencySector &&
                    data.additionalProperties.cod === args.competencySector
                  ) {
                    return data;
                  } else if (
                    data.additionalProperties.competencyType &&
                    data.additionalProperties.competencyType ===
                      args.competencyType &&
                    data.additionalProperties.competencyArea &&
                    data.additionalProperties.competencyArea ===
                      args.competencyArea &&
                    !data.additionalProperties.cod &&
                    data.additionalProperties.competencySector &&
                    data.additionalProperties.cod === args.competencySector
                  ) {
                    return data;
                  } else if (
                    data.additionalProperties.competencyType &&
                    data.additionalProperties.competencyType ===
                      args.competencyType &&
                    !data.additionalProperties.competencyArea &&
                    data.additionalProperties.cod &&
                    data.additionalProperties.cod === args.cod &&
                    data.additionalProperties.competencySector &&
                    data.additionalProperties.cod === args.competencySector
                  ) {
                    return data;
                  } else if (
                    !data.additionalProperties.competencyType &&
                    data.additionalProperties.competencyArea &&
                    data.additionalProperties.competencyArea ===
                      args.competencyArea &&
                    data.additionalProperties.cod &&
                    data.additionalProperties.cod === args.cod &&
                    data.additionalProperties.competencySector &&
                    data.additionalProperties.cod === args.competencySector
                  ) {
                    return data;
                  } else if (
                    data.additionalProperties.competencyType &&
                    data.additionalProperties.competencyArea &&
                    data.additionalProperties.competencyArea ===
                      args.competencyArea &&
                    data.additionalProperties.cod &&
                    data.additionalProperties.cod === args.cod &&
                    !data.additionalProperties.competencySector &&
                    data.additionalProperties.cod === args.competencySector
                  ) {
                    return data;
                  }
                }
              });
          } else if (
            args.competencyType ||
            args.competencyArea ||
            args.cod ||
            args.competencySector
          ) {
            switch (
              args.competencyType ||
              args.competencyArea ||
              args.cod ||
              args.competencySector
            ) {
              case args.competencyType:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => {
                    if (data.additionalProperties !== undefined) {
                      return (
                        data.additionalProperties.competencyType ===
                        args.competencyType
                      );
                    }
                  });
                return filterOutput;
                break;

              case args.competencyArea:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => {
                    if (data.additionalProperties !== undefined) {
                      return (
                        data.additionalProperties.competencyArea ===
                        args.competencyArea
                      );
                    }
                  });
                return filterOutput;
                break;

              case args.cod:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => {
                    if (data.additionalProperties !== undefined) {
                      return data.additionalProperties.cod === args.cod;
                    }
                  });
                return filterOutput;
                break;

              case args.competencySector:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => {
                    if (data.additionalProperties !== undefined) {
                      return (
                        data.additionalProperties.competencySector ===
                        args.competencySector
                      );
                    }
                  });
                return filterOutput;
                break;

              default:
                return filterOutput;
            }
          } else {
            return filterOutput;
          }
        },
      },
    },
  };

  const customPosFilters = {
    Query: {
      getAllPositions: {
        resolve(source, args, context, info) {
          console.log(res, args);
          var res = context.nodeModel.getAllNodes({ type: "json" });
          var filterOutput = res[0].positions;
          console.log("customPosFilters...");
          if (args.id) {
            filterOutput =
              filterOutput &&
              filterOutput.filter((data) => {
                if (data.id !== undefined) {
                  if (data.id === args.id) {
                    return data;
                  }
                }
              });
            return filterOutput;
          } else if (args.department && !args.sector) {
            filterOutput =
              filterOutput &&
              filterOutput.filter((data) => {
                if (data.additionalProperties !== undefined) {
                  if (
                    data.additionalProperties.department === args.department
                  ) {
                    return data;
                  }
                }
              });
            return filterOutput;
          } else if (args.sector && !args.department) {
            filterOutput =
              filterOutput &&
              filterOutput.filter((data) => {
                if (data.additionalProperties !== undefined) {
                  if (data.additionalProperties.sector === args.sector) {
                    return data;
                  }
                }
              });
            return filterOutput;
          } else if (args.sector && args.department) {
            filterOutput =
              filterOutput &&
              filterOutput.filter((data) => {
                if (data.additionalProperties !== undefined) {
                  if (
                    data.additionalProperties.sector &&
                    data.additionalProperties.sector === args.sector &&
                    data.additionalProperties.department &&
                    data.additionalProperties.department === args.department
                  ) {
                    return data;
                  } else if (
                    data.additionalProperties.sector &&
                    data.additionalProperties.sector === args.sector &&
                    !data.additionalProperties.department
                  ) {
                    return data;
                  } else if (
                    !data.additionalProperties.sector &&
                    data.additionalProperties.department &&
                    data.additionalProperties.department === args.department
                  ) {
                    return data;
                  } else if (
                    !data.additionalProperties.department &&
                    data.additionalProperties.sector &&
                    data.additionalProperties.sector === args.sector
                  ) {
                    return data;
                  }
                }
              });
          } else if (args.sector || args.department) {
            switch (args.department || args.sector) {
              case args.department:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => {
                    if (data.additionalProperties !== undefined) {
                      return (
                        data.additionalProperties.department === args.department
                      );
                    }
                  });
                return filterOutput;
                break;

              case args.sector:
                filterOutput =
                  filterOutput &&
                  filterOutput.filter((data) => {
                    if (data.additionalProperties !== undefined) {
                      return data.additionalProperties.sector === args.sector;
                    }
                  });
                return filterOutput;
                break;

              default:
                return filterOutput;
            }
          } else {
            return filterOutput;
          }
        },
      },
    },
  };

  createResolvers(posResolvers);
  createResolvers(rolesResolvers);
  createResolvers(activitiesResolvers);
  createResolvers(competenciesResolvers);
  createResolvers(allPosDepartments);
  createResolvers(allCods);
  createResolvers(allAreas);
  createResolvers(allSectors);
  createResolvers(customCompFilters);
  createResolvers(customPosFilters);
};

// For creating pages during build time
const path = require("path");

exports.createPages = async ({ graphql, actions, reporter }) => {
  const { createPage } = actions;
  console.log("Creating pages!");
  const result = await graphql(
    `
      {
        allJson {
          edges {
            node {
              competencies {
                type
                status
                source
                name
                id
                description
                additionalProperties {
                  cod
                  competencyArea
                  competencyType
                  competencySector
                }
                children {
                  id
                  name
                  description
                  source
                  level
                  type
                }
              }
            }
          }
        }
      }
    `
  );
  if (result.errors) {
    console.log("Error during dynamic page creation");
    reporter.panicOnBuild("Error during dynamic page creation");
    return;
  }

  const details = result.data.allJson.edges[0].node.competencies;

  details.map((i, j) => {
    // Competency additional properties schema check
    Object.keys(i.additionalProperties).length > 0 &&
      Object.keys(i.additionalProperties).map((k, n) => {
        if (i.additionalProperties[k] === null) {
          console.log(`Not existing field found: ${k} for ComptencyID ${i.id}`);
          i.additionalProperties[k] = "";
        }
      });

    // Competency chidren properties schema check
    Object.keys(i.children).length > 0 &&
      Object.keys(i.children).map((k, n) => {
        if (i.children[k] === null) {
          console.log(`Not existing field found: ${k}`);
          i.children[k] = "";
        }
      });
  });

  details.forEach((p) => {
    createPage({
      path: `/competencyDetail/${p.id}`,
      component: path.resolve("./src/pages/competencyDetail.js"),
      context: {
        slug: p.id,
        data: p,
      },
    });
  });
};
